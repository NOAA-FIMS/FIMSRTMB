[{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the NOAA Fisheries Integrated Modeling System","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"comprehensive set guidelines contributing NOAA’s Fisheries Integrated Modeling System can found NMFS Fish Tools Organization GitHub. mostly guidelines, rules. Use best judgment, feel free propose changes document pull request collaborative workflow document.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"project everyone participating governed Code Conduct. participating, expected uphold code. Please report unacceptable behavior fims.conduct@noaa.gov.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/CONTRIBUTING.html","id":"i-dont-want-to-read-this-whole-thing-i-just-have-a-question","dir":"","previous_headings":"","what":"I don’t want to read this whole thing I just have a question!!!","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"Note: Please don’t file issue ask question. ’ll get faster results using resources . Please use GitHub Discussions question. special category set Q&. , also check categories see question already answered.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/CONTRIBUTING.html","id":"i-want-to-file-a-bug-or-feature-request","dir":"","previous_headings":"","what":"I want to file a bug or feature request","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"Please use issue templates submit Bug Report, Feature Request, Refactor.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/CONTRIBUTING.html","id":"how-can-i-contribute","dir":"","previous_headings":"","what":"How can I contribute?","title":"Contributing to the NOAA Fisheries Integrated Modeling System","text":"contributions code! Writing documentation, teaching, activities also key parts contributing software, guidelines covered collaborative workflow book. information open source contributions, see Open Source Guide’s Contribute page.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-1-navigate-to-the-rcpp-directory-and-rcpp-file-of-interest","dir":"Articles","previous_headings":"","what":"Step 1 Navigate to the rcpp directory and rcpp file of interest","title":"Modify a FIMS module to make it callable from RTMB","text":"rcpp directory located inst/include/interface/rcpp/rcpp_objects. , Rcpp interface files listed category, e.g. rcpp_growth, rcpp_selectivity, etc. vignette walk modifying Beverton-Holt recruitment function rcpp_recruitment.hpp make callable RTMB. top file, add following isn’t already included:","code":"#include \"../../RTMB.h\""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-2-locate-the-beverton-holt-recruitment-evaluate_mean-function-in-rcpp_recruitment","dir":"Articles","previous_headings":"","what":"Step 2 Locate the Beverton-Holt recruitment evaluate_mean function in rcpp_recruitment","title":"Modify a FIMS module to make it callable from RTMB","text":"Find BevertonHoltRecruitmentInterface. Within class, locate evaluate_mean function, Beverton-Holt C++ function called. Note modules, function just called evaluate() function needs copied copy modified callable RTMB.","code":"virtual double evaluate_mean(double spawners, double phi_0) {     fims_popdy::SRBevertonHolt<double> BevHolt;     BevHolt.logit_steep.resize(1);     BevHolt.logit_steep[0] = this->logit_steep[0].initial_value_m;     if (this->logit_steep[0].initial_value_m == 1.0) {       Rcpp::warning(         \"Steepness is subject to a logit transformation. \"         \"Fixing it at 1.0 is not currently possible.\"       );     }     BevHolt.log_rzero.resize(1);     BevHolt.log_rzero[0] = this->log_rzero[0].initial_value_m;      return BevHolt.evaluate_mean(spawners, phi_0);   }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-3-create-a-copy-of-this-function-","dir":"Articles","previous_headings":"","what":"Step 3: Create a copy of this function.","title":"Modify a FIMS module to make it callable from RTMB","text":"Rename evaluate_mean_RTMB modify type virtual double ADrep. Add documentation wrap entire function : ensure function compiled TMB used.","code":"#ifdef TMB_MODEL  ... #endif #ifdef TMB_MODEL     /**    * @brief Evaluate recruitment using the Beverton--Holt stock--recruitment    * relationship.    * @param spawners Spawning biomass per time step.    * @param phi_0 The biomass at unfished levels.    */    ADrep evaluate_mean_RTMB(double spawners, double phi_0) {     fims_popdy::SRBevertonHolt<double> BevHolt;     BevHolt.logit_steep.resize(1);     BevHolt.logit_steep[0] = this->logit_steep[0].initial_value_m;     if (this->logit_steep[0].initial_value_m == 1.0) {       Rcpp::warning(         \"Steepness is subject to a logit transformation. \"         \"Fixing it at 1.0 is not currently possible.\"       );     }     BevHolt.log_rzero.resize(1);     BevHolt.log_rzero[0] = this->log_rzero[0].initial_value_m;      return BevHolt.evaluate_mean(spawners, phi_0);   }   #endif"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-4-modify-types","dir":"Articles","previous_headings":"","what":"Step 4: Modify types:","title":"Modify a FIMS module to make it callable from RTMB","text":"Modify types input parameters double ADrep Modify type within class declaration function double ad, e.g. fims_popdy::SRBevertonHolt<double> fims_popdy::SRBevertonHolt<ad>","code":"ADrep evaluate_mean_RTMB(ADrep spawners, ADrep phi_0) {   fims_popdy::SRBevertonHolt<ad> BevHolt;   BevHolt.logit_steep.resize(1);   BevHolt.logit_steep[0] = this->logit_steep[0].initial_value_m;   if (this->logit_steep[0].initial_value_m == 1.0) {     Rcpp::warning(       \"Steepness is subject to a logit transformation. \"       \"Fixing it at 1.0 is not currently possible.\"     );   }   BevHolt.log_rzero.resize(1);   BevHolt.log_rzero[0] = this->log_rzero[0].initial_value_m;    return BevHolt.evaluate_mean(spawners, phi_0); }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-5-add-new-pointers-for-each-parameter","dir":"Articles","previous_headings":"","what":"Step 5: Add new pointers for each parameter","title":"Modify a FIMS module to make it callable from RTMB","text":"input parameter, set new pointer using const ad* wrap input parameter adptr(). additional parameters model specified input, e.g. logit_steep, add parameters input set new pointers :","code":"ADrep evaluate_mean_RTMB(ADrep spawners, ADrep phi_0, ADrep logit_steep, ADrep log_rzero) {     fims_popdy::SRBevertonHolt<ad> BevHolt;     const ad* spawners_ptr = adptr(spawners);     const ad* phi_0_ptr = adptr(phi_0);     const ad* logit_steep_ptr = adptr(logit_steep);     const ad* log_rzero_ptr = adptr(log_rzero);          BevHolt.logit_steep.resize(1);     BevHolt.logit_steep[0] = this->logit_steep[0].initial_value_m;     if (this->logit_steep[0].initial_value_m == 1.0) {       Rcpp::warning(         \"Steepness is subject to a logit transformation. \"         \"Fixing it at 1.0 is not currently possible.\"       );     }     BevHolt.log_rzero.resize(1);     BevHolt.log_rzero[0] = this->log_rzero[0].initial_value_m;      return BevHolt.evaluate_mean(spawners, phi_0);   }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-6-set-parameters-to-pointers","dir":"Articles","previous_headings":"","what":"Step 6: Set parameters to pointers","title":"Modify a FIMS module to make it callable from RTMB","text":"parameters set within function, set equal value pointer, e.g. = *logit_steep_ptr parameters passed input evaluate_mean, pass pointers instead","code":"ADrep evaluate_mean_RTMB(ADrep spawners, ADrep phi_0, ADrep logit_steep, ADrep log_rzero) {     fims_popdy::SRBevertonHolt<ad> BevHolt;     const ad* spawners_ptr = adptr(spawners);     const ad* phi_0_ptr = adptr(phi_0);     const ad* logit_steep_ptr = adptr(logit_steep);     const ad* log_rzero_ptr = adptr(log_rzero);      BevHolt.logit_steep.resize(1);     BevHolt.logit_steep[0] = *logit_steep_ptr;     if (BevHolt.logit_steep[0] == 1.0) {       Rcpp::warning(         \"Steepness is subject to a logit transformation. \"         \"Fixing it at 1.0 is not currently possible.\"       );     }     BevHolt.log_rzero.resize(1);     BevHolt.log_rzero[0] = *log_rzero_ptr;      return BevHolt.evaluate_mean(spawners_ptr, phi_0_ptr);   }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-7-modify-the-return-statement","dir":"Articles","previous_headings":"","what":"Step 7: Modify the return statement","title":"Modify a FIMS module to make it callable from RTMB","text":"following code needs added make return callable RTMB: x input variable. return function needs set loop input return modified ans: completed function Beverton-Holt :","code":"int n = x.size(); ADrep ans(n);  ad* Y = adptr(ans); for(int i=0; i<n; i++){   Y[i] = module.evaluate(x[i]); } return ans; #ifdef TMB_MODEL     /**    * @brief Evaluate recruitment using the Beverton--Holt stock--recruitment    * relationship.    * @param spawners Spawning biomass per time step.    * @param phi_0 The biomass at unfished levels.    */    ADrep evaluate_mean_RTMB(ADrep spawners, ADrep phi_0, ADrep logit_steep, ADrep log_rzero) {     fims_popdy::SRBevertonHolt<ad> BevHolt;     const ad* spawners_ptr = adptr(spawners);     const ad* phi_0_ptr = adptr(phi_0);     const ad* logit_steep_ptr = adptr(logit_steep);     const ad* log_rzero_ptr = adptr(log_rzero);      BevHolt.logit_steep.resize(1);     BevHolt.logit_steep[0] = *logit_steep_ptr;     if (BevHolt.logit_steep[0] == 1.0) {       Rcpp::warning(         \"Steepness is subject to a logit transformation. \"         \"Fixing it at 1.0 is not currently possible.\"       );     }     BevHolt.log_rzero.resize(1);     BevHolt.log_rzero[0] = *log_rzero_ptr;      int n = spawners.size();     ADrep ans(n);      ad* Y = adptr(ans);      for(int i=0; i<n; i++){         Y[i] = BevHolt.evaluate_mean(spawners_ptr[i], phi_0_ptr[0]);     }        return ans;    }   #endif"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-8-expose-to-r","dir":"Articles","previous_headings":"","what":"Step 8: Expose to R","title":"Modify a FIMS module to make it callable from RTMB","text":"final step expose new function R. Navigate fims_module.hpp file src Scroll BevertonHolt interface: Rcpp::class_<BevertonHoltRecruitmentInterface>(\"BevertonHoltRecruitment\"). Add following list methods: final interface code chunk look like:","code":".method(\"evaluate_mean_RTMB\", &BevertonHoltRecruitmentInterface::evaluate_mean_RTMB) Rcpp::class_<BevertonHoltRecruitmentInterface>(\"BevertonHoltRecruitment\")       .constructor()       .field(\"logit_steep\", &BevertonHoltRecruitmentInterface::logit_steep)       .field(\"log_rzero\", &BevertonHoltRecruitmentInterface::log_rzero)       .field(\"log_devs\", &BevertonHoltRecruitmentInterface::log_devs)       .field(\"log_r\", &BevertonHoltRecruitmentInterface::log_r,              \"recruitment as a random effect on the natural log scale\")       .field(\"nyears\", &BevertonHoltRecruitmentInterface::nyears,              \"Number of years\")       .field(\"log_expected_recruitment\",              &BevertonHoltRecruitmentInterface::log_expected_recruitment,              \"Log expectation of the recruitment process\")       .method(\"get_id\", &BevertonHoltRecruitmentInterface::get_id)       .method(\"SetRecruitmentProcessID\",               &BevertonHoltRecruitmentInterface::SetRecruitmentProcessID,               \"Set unique ID for recruitment process\")       .method(\"evaluate_mean_RTMB\", &BevertonHoltRecruitmentInterface::evaluate_mean_RTMB,                 \"Evaluate the mean recruitment using the RTMB framework\")       .method(\"evaluate_mean\",               &BevertonHoltRecruitmentInterface::evaluate_mean);"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"step-9-use-function-in-rtmb-modeling","dir":"Articles","previous_headings":"","what":"Step 9: Use function in RTMB Modeling","title":"Modify a FIMS module to make it callable from RTMB","text":"Setup RTMB environment:","code":"library(FIMSRTMB) FIMSRTMB:::setup_RTMB() ## Global pointer successfully set: 0x7fd81610aee0 library(ggplot2)  # clear memory clear()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"set-up-a-recruitment-module-using-fims","dir":"Articles","previous_headings":"Step 9: Use function in RTMB Modeling","what":"Set up a recruitment module using FIMS","title":"Modify a FIMS module to make it callable from RTMB","text":"","code":"recruitment <- methods::new(BevertonHoltRecruitment) recruitment$show() ## Reference class object of class \"Rcpp_BevertonHoltRecruitment\" ## Field \"log_devs\": ## 0x556b5f626d30 ## {\"id\": 3, ## \"value\": 0, ## \"estimated_value\": 0, ## \"min\": \"-Infinity\", ## \"max\": \"Infinity\", ## \"estimation type is\": \"constant\" ## }  Field \"log_expected_recruitment\": ## 0x556b698bc510 ## {\"id\": 5, ## \"value\": 0, ## \"estimated_value\": 0, ## \"min\": \"-Infinity\", ## \"max\": \"Infinity\", ## \"estimation type is\": \"constant\" ## }  Field \"log_r\": ## 0x556b697b6fa0 ## {\"id\": 4, ## \"value\": 0, ## \"estimated_value\": 0, ## \"min\": \"-Infinity\", ## \"max\": \"Infinity\", ## \"estimation type is\": \"constant\" ## }  Field \"log_rzero\": ## 0x556b65f331b0 ## {\"id\": 2, ## \"value\": 0, ## \"estimated_value\": 0, ## \"min\": \"-Infinity\", ## \"max\": \"Infinity\", ## \"estimation type is\": \"constant\" ## }  Field \"logit_steep\": ## 0x556b67dc6720 ## {\"id\": 1, ## \"value\": 0, ## \"estimated_value\": 0, ## \"min\": \"-Infinity\", ## \"max\": \"Infinity\", ## \"estimation type is\": \"constant\" ## }  Field \"nyears\": ## C++ object <0x556b6a53f630> of class 'SharedInt' <0x556b5e5b0340>"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"simulate-data-using-the-fims-module","dir":"Articles","previous_headings":"Step 9: Use function in RTMB Modeling","what":"Simulate data using the FIMS module","title":"Modify a FIMS module to make it callable from RTMB","text":"","code":"# set the two parameters from the recruitment module: r0 <- 1e+06; h <- 0.75; phi_0 <- 0.1 recruitment$log_rzero[1]$value <- log(r0) recruitment$logit_steep[1]$value <- FIMSRTMB::logit(0.2, 1.0, 0.75);  #spawners from FIMS comparison test data X <- c(9317.537, 9388.807, 9356.490, 9325.130, 8950.209, 8720.467, 8659.642, 8613.245, 7689.096,         7434.469, 6989.143, 6556.460, 6105.419, 5831.374, 5350.386, 4978.918, 4758.962, 4159.215,         3842.397, 3410.286, 3047.454, 2564.075, 2615.329, 2348.742, 2130.985, 1932.811, 1900.979,         1789.534, 1598.782, 1719.572, 1648.269) Y <- mu <- X * 0 sdy <- 7500 #observation error around bevertonholt  set.seed(123) for(i in seq_along(X)){     # evaluate returns the bevertonholt function given the parameters and x     mu[i] <- recruitment$evaluate_mean(X[i], phi_0)     # simulate random noise around the mean     Y[i] <- rnorm(1, mu[i], sdy) }  df <- data.frame(x = X, y = Y) ggplot(df, aes(x = x, y = y)) + geom_point()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"set-up-rtmb-model","dir":"Articles","previous_headings":"Step 9: Use function in RTMB Modeling","what":"Set up RTMB model","title":"Modify a FIMS module to make it callable from RTMB","text":"","code":"dat <- list(y = Y, x = X) par <- list(log_rzero = log(max(Y)), logit_steep = 0,             ln_sdy = log(1000))  mod <- function(par){     getAll(par, dat)     sdy <- exp(par$ln_sdy)     mean_recruitment <- recruitment$evaluate_mean_RTMB(         spawners = advector(dat$x), phi_0 = advector(0.1),         logit_steep = advector(par$logit_steep),         log_rzero = advector(par$log_rzero)     )     nll <- 0     for(i in seq_along(x)){         nll <- nll - RTMB::dnorm(y[i], mean_recruitment[i], sdy, TRUE)     }     return(nll) }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_add_module.html","id":"generate-tmb-object-and-optimize","dir":"Articles","previous_headings":"Step 9: Use function in RTMB Modeling","what":"Generate TMB object and optimize","title":"Modify a FIMS module to make it callable from RTMB","text":"","code":"obj <- RTMB::MakeADFun(mod, par) opt <- nlminb(obj$par, obj$fn, obj$gr) ## outer mgc:  1018152  ## outer mgc:  82367.92  ## outer mgc:  54060.36  ## outer mgc:  20589.24  ## outer mgc:  16981.42  ## outer mgc:  3841.6  ## outer mgc:  2542.75  ## outer mgc:  1042.539  ## outer mgc:  2049.42  ## outer mgc:  1160.555  ## outer mgc:  854.7764  ## outer mgc:  913.3611  ## outer mgc:  825.0972  ## outer mgc:  300.6294  ## outer mgc:  157.265  ## outer mgc:  43.9615  ## outer mgc:  20.57949  ## outer mgc:  8.150058  ## outer mgc:  4.185564  ## outer mgc:  2.558583  ## outer mgc:  0.9774273  ## outer mgc:  0.5983629  ## outer mgc:  0.2017957  ## outer mgc:  0.1237911  ## outer mgc:  0.009367911  ## outer mgc:  0.001011514 opt$par ##   log_rzero logit_steep      ln_sdy  ##  13.8394270   0.7699375   8.8467662 r0; exp(opt$par[\"log_rzero\"]) ## [1] 1e+06 ## log_rzero  ##   1024205 h; FIMSRTMB::inv_logit(0.2, 1.0, opt$par[\"logit_steep\"]) ## [1] 0.75 ## [1] 0.7468059"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_demo.html","id":"fims-rtmb-example","dir":"Articles","previous_headings":"","what":"FIMS-RTMB Example","title":"Call FIMS module from RTMB","text":"demo uses FIMS module set RTMB model.","code":"library(FIMSRTMB) FIMSRTMB:::setup_RTMB() ## Global pointer successfully set: 0x7f8d7550aee0 library(ggplot2)  # clear memory clear()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_demo.html","id":"set-up-a-logistic-module-using-fims","dir":"Articles","previous_headings":"FIMS-RTMB Example","what":"Set up a logistic module using FIMS","title":"Call FIMS module from RTMB","text":"","code":"logistic <- methods::new(LogisticSelectivity)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_demo.html","id":"simulate-data-using-the-fims-module","dir":"Articles","previous_headings":"FIMS-RTMB Example","what":"Simulate data using the FIMS module","title":"Call FIMS module from RTMB","text":"","code":"# set the two parameters from the logistic module: #   inflection_point and slope logistic$inflection_point[1]$value <- 10.0 logistic$slope[1]$value <- 0.2 X <- 1:30 Y <- mu <- X * 0 sdy <- 0.05 #observation error around logistic  set.seed(123) for(i in X){     # evaluate returns the logistic function given the parameters and x      mu[i] <- logistic$evaluate(X[i])     # simulate random noise around the mean     Y[i] <- rnorm(1, mu[i], sdy) }  df <- data.frame(x = X, y = Y) ggplot(df, aes(x = x, y = y)) + geom_point()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_demo.html","id":"set-up-rtmb-model","dir":"Articles","previous_headings":"FIMS-RTMB Example","what":"Set up RTMB model","title":"Call FIMS module from RTMB","text":"","code":"dat <- list(y = Y, x = X) par <- list(inflection_point = 10, slope = 0.2,             ln_sdy = 0)  mod <- function(par){     getAll(par, dat)     sdy <- exp(par$ln_sdy)     mean_selectivity <- logistic$evaluate_RTMB(         x = advector(x),         inflection_point = advector(par$inflection_point),         slope = advector(par$slope)     )     nll <- 0     for(i in seq_along(x)){         nll <- nll - RTMB::dnorm(y[i], mean_selectivity[i], sdy, TRUE)     }     return(nll) }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/articles/RTMB_demo.html","id":"generate-tmb-object-and-optimize","dir":"Articles","previous_headings":"FIMS-RTMB Example","what":"Generate TMB object and optimize","title":"Call FIMS module from RTMB","text":"","code":"obj <- RTMB::MakeADFun(mod, par) opt <- nlminb(obj$par, obj$fn, obj$gr) ## outer mgc:  29.93006  ## outer mgc:  29.50302  ## outer mgc:  512.6907  ## outer mgc:  218.1737  ## outer mgc:  72.97432  ## outer mgc:  82.41938  ## outer mgc:  37.30409  ## outer mgc:  0.9372692  ## outer mgc:  11.07212  ## outer mgc:  5.289398  ## outer mgc:  3.868949  ## outer mgc:  0.6818801  ## outer mgc:  3.179516  ## outer mgc:  1.391376  ## outer mgc:  3.705423  ## outer mgc:  0.341448  ## outer mgc:  0.008789876  ## outer mgc:  0.0006018996  ## outer mgc:  1.274528e-05 opt$par ## inflection_point            slope           ln_sdy  ##        9.8550441        0.1874293       -3.0572592"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kelli F. Johnson. Author, maintainer. Jon K. T. Brodziak. Author. Kathryn L. Doering. Author. Andrea M. Havron. Author. Ronald Klasky. Author. Peter T. Kuriyama. Author. Christopher M. Legault. Author. Bai Li. Author. Timothy J. Miller. Author. Cole C. Monnahan. Author. Megumi C. Oshima. Author. Kyle W. Shertzer. Author. Christine C. Stawitz. Author. Jane Y. Sullivan. Author. Matthew Supernaw. Author. Ian G. Taylor. Author. Nathan R. Vaughan. Author. Kristan Blackhart. Contributor. James N. Ianelli. Contributor.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FIMS Implementation Team. 2022. NOAA-FIMS: NOAA Fisheries Integrated Modeling System. R package version 0.0.0.9000. https://github.com/NOAA-FIMS/FIMS","code":"@Manual{,   title = {{NOAA-FIMS}: The NOAA Fisheries Integrated Modeling System},   author = {FIMS Implementation Team},   year = {2022},   url = {https://github.com/NOAA-FIMS/FIMS}, }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"overview","dir":"","previous_headings":"","what":"Fisheries Integrated Modeling System (FIMS)","title":"Fisheries Integrated Modeling System (FIMS)","text":"fork represents RTMB extension NOAA Fisheries Integrated Modeling System (FIMS). Users can access functions within FIMS build custom fisheries models using RTMB. Examples provided vignettes. Currently, two functions available logisitic selectivity Beverton-Holt recruitment. Please see detailed instructions RTMB_add_module make FIMS function available RMTB. **Note fork run FIMS model, accesses FIMS functions. See FIMS main repo details FIMS R package. Users developers welcome submit ideas questions using GitHub Discussion Board. Discussion Board place members assessment open-source software community ask answer questions, share updates, open-ended conversations, follow along decisions affecting FIMS. happen find bug, please report issues page FIMSRTMB fork.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"installing-fimsrtmb","dir":"","previous_headings":"","what":"Installing FIMSRTMB","title":"Fisheries Integrated Modeling System (FIMS)","text":"Install latest version FIMSRTMB github:","code":"remotes::install_github(\"NOAA-FIMS/FIMSRTMB)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Fisheries Integrated Modeling System (FIMS)","text":"Please report bugs along minimal reproducible example FIMS GitHub Issues page.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Fisheries Integrated Modeling System (FIMS)","text":"contributors participating contributing FIMS project expected adhere FIMS Code Conduct.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Fisheries Integrated Modeling System (FIMS)","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/index.html","id":"noaa-disclaimer","dir":"","previous_headings":"","what":"NOAA Disclaimer","title":"Fisheries Integrated Modeling System (FIMS)","text":"repository scientific product official communication National Oceanic Atmospheric Administration, United States Department Commerce. NOAA GitHub project code provided ‘’ basis user assumes responsibility use. claims Department Commerce Department Commerce bureaus stemming use GitHub project governed applicable Federal law. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring Department Commerce. Department Commerce seal logo, seal logo DOC bureau, shall used manner imply endorsement commercial product activity DOC United States Government. Software code created U.S. Government employees subject copyright United States (17 U.S.C. section 105). United States/Department Commerce reserve rights seek obtain copyright protection countries United States Software authored entirety Department Commerce. end, Department Commerce hereby grants Recipient royalty-free, nonexclusive license use, copy, create derivative works Software outside United States.  U.S. Department Commerce | National Oceanographic Atmospheric Administration | NOAA Fisheries","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Class constructors for class FIMSFit and associated child classes — FIMSFit","title":"Class constructors for class FIMSFit and associated child classes — FIMSFit","text":"Create object class FIMSFit running FIMS model. typically done within fit_fims() can create manually user used bespoke code fit FIMS model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class constructors for class FIMSFit and associated child classes — FIMSFit","text":"","code":"FIMSFit(   input,   obj,   opt = list(),   sdreport = list(),   timing = c(time_total = as.difftime(0, units = \"secs\")),   version = utils::packageVersion(\"FIMS\") )"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class constructors for class FIMSFit and associated child classes — FIMSFit","text":"input Input list returned initialize_fims(). obj object returned TMB::MakeADFun(). opt object returned optimizer, typically stats::nlminb(), used fit TMB model. sdreport object sdreport class returned TMB::sdreport(). timing vector least length one, entries timediff class least one named \"time_total\". information available fit_fims() added argument internally power user can calculate time took run model subtracting two Sys.time() objects. version version FIMS used optimize model. fit_fims() used optimize model, default use current version package loaded.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class constructors for class FIMSFit and associated child classes — FIMSFit","text":"object S4 class FIMSFit returned. object following slots: input: list containing model setup form passed. obj: list returned TMB::MakeADFun() form passed. opt: list containing optimized model form passed. max_gradient: maximum gradient found optimizing model. default NA, means model optimized. report: list containing model report obj[[\"report\"]](). sdreport: object sdreport class containing output TMB::sdreport(obj). estimates: table parameter values uncertainty. timing: length time took run model optimized. version: package version FIMS used fit model least version used create output, always running function .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"constructor functions take single input build object specific needs model type within FIMS. FIMSFrame parent class. Future, associated child classes additional slots needed different types models.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"","code":"FIMSFrame(data)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"data data.frame contains necessary columns construct FIMSFrame-class object. Currently, columns type, name, age, length, datestart, dateend, value, unit, uncertainty. See data1 object FIMS, e.g., data(data1, package = \"FIMS\").","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"object S4 class FIMSFrame class, one child classes, validated returned. objects minimum slot called data store input data frame. Additional slots dependent child class. Use methods::showClass() see available slots.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":"data","dir":"Reference","previous_headings":"","what":"data","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"input data sorted expanded returning data slot.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/FIMSFrame.html","id":"sorting","dir":"Reference","previous_headings":"","what":"Sorting","title":"Class constructors for FIMSFrame and associated child classes — FIMSFrame","text":"important order rows data correct expected user . Instead, returned data sorted using dplyr::arrange() placing data slot. Data first sorted data type, placing weight--age data next weight--age data landings data next landings data. Thus, age-composition data come first type \"age\" \"\" first alphabet. types follow according order alphabet. Next, within type, data organized fleet. , age-composition information fleet1 come survey1. Next, data within type fleet arranged datestart, e.g., year. end sorting time series data like landings indices. biological data sorted bin. Thus, age-composition information arranged follows: Length composition-data sorted way length bin instead age bin. becomes complicated age--length-conversion data, sorted type, name, datestart, age, length. , full set length, e.g., length 10, length 20, length 30, etc., placed together given age. age, another entire set length information provided next age. year complete given fleet next year begin.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_Math.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets methods for operators under the S4 Generic Group, Ops — Ops,Rcpp_Parameter,Rcpp_Parameter-method","title":"Sets methods for operators under the S4 Generic Group, Ops — Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"Ops include Arith (+, -, *, ^, %%, %/%, /); Compare (==, >, <, !=, <=, >=); Logic (&, |). Methods mathematical functions include trigonometry functions, abs, sign, sqrt, ceiling, floor, trunc, cummax, cumprod, cumsum, log, log10, log2, log1p, exp, expm1, gamma, lgamma, digamma, trigamma.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_Math.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets methods for operators under the S4 Generic Group, Ops — Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"","code":"# S4 method for class 'Rcpp_Parameter,Rcpp_Parameter' Ops(e1, e2)  # S4 method for class 'Rcpp_Parameter,numeric' Ops(e1, e2)  # S4 method for class 'numeric,Rcpp_Parameter' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector,Rcpp_ParameterVector' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector,numeric' Ops(e1, e2)  # S4 method for class 'numeric,Rcpp_ParameterVector' Ops(e1, e2)  # S4 method for class 'Rcpp_ParameterVector' Math(x)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_Math.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets methods for operators under the S4 Generic Group, Ops — Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"e1, e2 Rcpp_Parameter Rcpp_ParameterVector class object numeric vector value. x Rcpp_ParameterVector class object.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_Math.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets methods for operators under the S4 Generic Group, Ops — Ops,Rcpp_Parameter,Rcpp_Parameter-method","text":"numeric logical value(s) depending generic length input values. vector numeric values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_ParameterVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter for Rcpp_ParameterVector — [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","title":"Setter for Rcpp_ParameterVector — [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"R, indexing starts one. , C++ indexing starts zero. functions translation can think R terms. R, indexing starts one. , C++ indexing starts zero. function translation can think R terms. Methods summary functions include max, min, range, prod, sum, , .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_ParameterVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter for Rcpp_ParameterVector — [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"","code":"# S4 method for class 'Rcpp_ParameterVector,ANY,ANY,ANY' x[i, j] <- value  # S4 method for class 'Rcpp_ParameterVector,numeric,ANY,ANY' x[i]  # S4 method for class 'Rcpp_ParameterVector' length(x)  # S4 method for class 'Rcpp_ParameterVector' sum(x)  # S4 method for class 'Rcpp_ParameterVector' dim(x)  # S4 method for class 'Rcpp_ParameterVector' Summary(x)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_ParameterVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter for Rcpp_ParameterVector — [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"x Rcpp_ParameterVector class object. integer specifying location R speak, indexing starts one, vector wish get information . j used Rcpp_ParameterVector vector. value value want set indexed location .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/Rcpp_ParameterVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setter for Rcpp_ParameterVector — [<-,Rcpp_ParameterVector,ANY,ANY,ANY-method","text":"[<-, index object x set value. [, index object x returned. length(), length object x returned integer. sum(), sum object x returned numeric value. dim(), dimensions object x returned single integer one dimension return vector. Summary returns single two numeric logical values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/check_fims.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all styling, documentation, and testing for FIMS repository — check_fims","title":"Run all styling, documentation, and testing for FIMS repository — check_fims","text":"FIMS consists C++ R code function exists style, document, test file types. function first works C++ code moves onto R code. file type styles files, e.g., puts appropriate spacing brackets; build documentation, e.g., roxygen2::roxygenize(); tests functions.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/check_fims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all styling, documentation, and testing for FIMS repository — check_fims","text":"","code":"check_fims()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/check_fims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all styling, documentation, and testing for FIMS repository — check_fims","text":"invisible list returned following four items: style_r: Contains report styler::style_pkg(). spelling_code: Contains 2-column data frame words spelled incorrectly code excluded word list. spelling_package: Contains 2-column data frame words need added WORDLIST file. empty data frame words spelled incorrectly. spelling_word_list: vector strings indicating words included WORDLIST file ignored performing spell check.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/check_fims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all styling, documentation, and testing for FIMS repository — check_fims","text":"","code":"if (FALSE) { # \\dontrun{ check_results <- check_fims() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/create_default_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Create default parameters for a FIMS model — create_default_parameters","title":"Create default parameters for a FIMS model — create_default_parameters","text":"function generates default parameter settings Fisheries Integrated Modeling System (FIMS) model, including recruitment, growth, maturity, population, fleet configurations. applies default configurations specific module settings provided user. function updates input parameters Fisheries Integrated Modeling System (FIMS) model. allows users modify specific parameters providing new values, retaining existing modules information current input.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/create_default_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create default parameters for a FIMS model — create_default_parameters","text":"","code":"create_default_parameters(   data,   fleets,   recruitment = list(form = \"BevertonHoltRecruitment\", process_distribution = c(log_devs     = \"DnormDistribution\")),   growth = list(form = \"EWAAgrowth\"),   maturity = list(form = \"LogisticMaturity\") )  update_parameters(current_parameters, modified_parameters)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/create_default_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create default parameters for a FIMS model — create_default_parameters","text":"data S4 object. FIMS input data. fleets named list settings fleet module. element list specify fleet's selectivity form settings data distribution. argument missing, default values applied fleet specified present data based types information present fleet. recruitment list specifying settings recruitment module. default Beverton–Holt recruitment relationship log-normal recruitment deviations. growth list specifying settings growth module. default \"EWAAgrowth\". maturity list specifying settings maturity module. default \"LogisticMaturity\". current_parameters list containing current input parameters, including: parameters: list parameter inputs. modules: list module names used model. modified_parameters named list representing new parameter values update.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/create_default_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create default parameters for a FIMS model — create_default_parameters","text":"list containing following two entries: parameters: list parameter inputs FIMS model. modules: list modules default user-provided settings. list containing: parameters list updated parameter inputs includes modifications made user. modules unchanged list module names current input.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/create_default_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create default parameters for a FIMS model — create_default_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Load the example dataset and create a FIMS data frame data(\"data1\") fims_frame <- FIMSFrame(data1)  # Define fleets specifications for each fleet in the example dataset fleet1 <- survey1 <- list(   selectivity = list(form = \"LogisticSelectivity\"),   data_distribution = c(     Index = \"DlnormDistribution\",     AgeComp = \"DmultinomDistribution\"   ) )  # Create a list of default parameters given the fleet specifications set up # above, recruitment, growth, and maturity specifications default_parameters <- fims_frame |>   create_default_parameters(     fleets = list(fleet1 = fleet1, survey1 = survey1),     recruitment = list(       form = \"BevertonHoltRecruitment\",       process_distribution = c(log_devs = \"DnormDistribution\")     ),     growth = list(form = \"EWAAgrowth\"),     maturity = list(form = \"LogisticMaturity\")   )  # Do the same as above except, model fleet1 with double logistic selectivity # and do not specify the recruitment, growth, and maturity specifications # because everything specified above were default arguments parameters_with_double_logistic <- fims_frame |>   create_default_parameters(     fleets = list(       fleet1 = list(         selectivity = list(form = \"DoubleLogisticSelectivity\"),         data_distribution = c(           Index = \"DlnormDistribution\",           AgeComp = \"DmultinomDistribution\",           LengthComp = \"DmultinomDistribution\"         )       ),       survey1 = survey1     )   )  # Compare the parameters for fleet1 in each set up default_fleet1 <- purrr::map_df(   default_parameters[[\"parameters\"]][[\"fleet1\"]],   \\(x) length(x) ) |>   tidyr::pivot_longer(cols = tidyselect::everything()) updated_fleet1 <- purrr::map_df(   parameters_with_double_logistic[[\"parameters\"]][[\"fleet1\"]],   \\(x) length(x) ) |>   tidyr::pivot_longer(cols = tidyselect::everything()) dplyr::full_join(default_fleet1, updated_fleet1, by = \"name\") knitr::kable(dplyr::full_join(default_fleet1, updated_fleet1, by = \"name\")) } # } if (FALSE) { # \\dontrun{ # Load the example dataset data(\"data1\") fims_frame <- FIMSFrame(data1)  # Define fleets specifications fleet1 <- survey1 <- list(   selectivity = list(form = \"LogisticSelectivity\"),   data_distribution = c(     Index = \"DlnormDistribution\",     AgeComp = \"DmultinomDistribution\"   ) )  # Create default parameters for the specified fleets default_parameters <- fims_frame |>   create_default_parameters(     fleets = list(fleet1 = fleet1, survey1 = survey1)   )  updated_parameters <- default_parameters |>   update_parameters(     modified_parameters = list(       fleet1 = list(         Fleet.log_Fmort.value = log(c(           0.009459165, 0.027288858, 0.045063639,           0.061017825, 0.048600752, 0.087420554,           0.088447204, 0.186607929, 0.109008958,           0.132704335, 0.150615473, 0.161242955,           0.116640187, 0.169346119, 0.180191913,           0.161240483, 0.314573212, 0.257247574,           0.254887252, 0.251462108, 0.349101406,           0.254107720, 0.418478117, 0.345721184,           0.343685540, 0.314171227, 0.308026829,           0.431745298, 0.328030899, 0.499675368         ))       )     )   )  # purrr::map_vec() can be used to compare the length of adjusted parameter # vectors with defaults for a specific module (e.g., fleet1) default_fleet1 <- purrr::map_vec(default_parameters[[\"parameters\"]][[\"fleet1\"]], \\(x) length(x)) updated_fleet1 <- purrr::map_vec(updated_parameters[[\"parameters\"]][[\"fleet1\"]], \\(x) length(x))  # purrr::map_df() can be used to summarize parameter vector lengths across all modules purrr::map_df(   updated_parameters[[\"parameters\"]], \\(x) purrr::map_vec(x, length),   .id = \"module\" ) |>   tibble::column_to_rownames(var = \"module\") |>   t() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/data1.html","id":null,"dir":"Reference","previous_headings":"","what":"FIMS input data frame — data1","title":"FIMS input data frame — data1","text":"dataset containing information necessary run age-structured stock assessment model FIMS. data generated using ASSAMC package written model comparison project.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIMS input data frame — data1","text":"","code":"data1"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/data1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"FIMS input data frame — data1","text":"data frame 19080 observations 9 variables: type type data row contains. Allowed types include age, length, index, landings, age--length-conversion, weight--age data. name character string providing name information source data collected , e.g., \"Trawl fishery\". age integer age. Entry can NA information pertains multiple ages, e.g., total landings rather landings age-4 fish. length numeric length. Entry can NA information pertain length. datestart,dateend Start end dates data collection period. Format dates using yyyy-mm-dd, can accommodate fake years 0001-01-01. value measurement interest. unit character string specifying units value. Allowed units data type follows. mt used index, landings, weight--age data. number proportion viable units composition data, former preferred unit measurement. uncertainty real value providing measurement uncertainty value. landings indices abundance standard deviation logged observations using lognormal distribution fit data. composition data input sample size.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/data1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FIMS input data frame — data1","text":"www.github.com/NOAA-FIMS/Age_Structured_Stock_Assessment_Model_Comparison","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/fit_fims.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a FIMS model (BETA) — fit_fims","title":"Fit a FIMS model (BETA) — fit_fims","text":"Fit FIMS model (BETA)","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/fit_fims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a FIMS model (BETA) — fit_fims","text":"","code":"fit_fims(   input,   get_sd = TRUE,   save_sd = TRUE,   number_of_loops = 3,   optimize = TRUE,   number_of_newton_steps = 0,   control = list(eval.max = 10000, iter.max = 10000, trace = 0),   filename = NULL )"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/fit_fims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a FIMS model (BETA) — fit_fims","text":"input Input list returned initialize_fims(). get_sd boolean specifying TMB::sdreport() calculated? save_sd logical, default TRUE, indicating whether sdreport returned output. FALSE, slot report empty. number_of_loops positive integer specifying number iterations optimizer performed improve gradient. default three, leading four total optimization steps. optimize Optimize (TRUE, default) (FALSE) build return list containing obj report slot. number_of_newton_steps number Newton steps using inverse Hessian optimization. yet implemented. control list optimizer settings passed stats::nlminb(). default list length three eval.max = 1000, iter.max = 10000, trace = 0. filename Character string giving file name save fitted object RDS object. Defaults 'fit.RDS', value NULL indicates save . specified, must end .RDS. file written folder given input[[\"path\"]]. yet implemented.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/fit_fims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a FIMS model (BETA) — fit_fims","text":"object class FIMSFit returned, structure regardless optimize = TRUE . Uncertainty information included estimates slot get_sd = TRUE.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/fit_fims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a FIMS model (BETA) — fit_fims","text":"function beta version still subject change without warning.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a slot in a FIMSFit object — get_FIMSFit","title":"Get a slot in a FIMSFit object — get_FIMSFit","text":"accessor function slot S4 class FIMSFit, function named get_*() star can replaced slot name, e.g., get_input(). accessor functions preferred way access objects stored available slots.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a slot in a FIMSFit object — get_FIMSFit","text":"","code":"get_input(x)  # S4 method for class 'FIMSFit' get_input(x)  get_report(x)  # S4 method for class 'FIMSFit' get_report(x)  get_obj(x)  # S4 method for class 'FIMSFit' get_obj(x)  get_opt(x)  # S4 method for class 'FIMSFit' get_opt(x)  get_max_gradient(x)  # S4 method for class 'FIMSFit' get_max_gradient(x)  get_sdreport(x)  # S4 method for class 'FIMSFit' get_sdreport(x)  get_estimates(x)  # S4 method for class 'FIMSFit' get_estimates(x)  get_fits(x)  # S4 method for class 'FIMSFit' get_fits(x)  get_number_of_parameters(x)  # S4 method for class 'FIMSFit' get_number_of_parameters(x)  get_timing(x)  # S4 method for class 'FIMSFit' get_timing(x)  get_version(x)  # S4 method for class 'FIMSFit' get_version(x)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a slot in a FIMSFit object — get_FIMSFit","text":"x Output returned fit_fims().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a slot in a FIMSFit object — get_FIMSFit","text":"get_input() returns list used fit FIMS model, returned object create_default_parameters(). get_report() returns TMB report, anything flagged reportable C++ code returned. get_obj() returns output TMB::MakeADFun(). get_opt() returns output nlminb(), minimizer used fit_fims(). get_max_gradient() returns maximum gradient found optimizing model. get_sdreport() returns list TMB::sdreport(). get_estimates() returns tibble parameter values uncertainties fitted model. get_fits() returns tibble input data corresponding expected values, likelihoods, additional metadata fitted model. tibble includes following variables: module_name: Character string describes name module, e.g., \"Data\". module_id: Integer provides identifier linking outputs. label: Character string describes type data. data_id: yet implemented/NA: Integer provide unique identifier data. fleet_name: yet implemented/NA: Character string provide fleet name corresponding name provided via FIMSFrame. unit: yet implemented/NA: Character string describe appropriate units data inputs expected values. uncertainty: yet implemented/NA: Character string describe uncertainty specified data input value. age: yet implemented/NA: Integer provide age affiliated data input, appropriate. length: yet implemented/NA: Integer provide length affiliated data input, appropriate. datestart: yet implemented/NA: Character string provide start date data input, corresponding value provided input data. dateend: yet implemented/NA: Character string provide end date data input, corresponding value provided input data. year: yet implemented/NA: Integer provide model year data input. init: Numeric provides initial value data input. expected: Numeric provides expected value data input. *NOTE: units provided init expected values need standardized. log_like: Numeric provides log-likelihood expected value. distribution: Character string indicates distribution used log-likelihood estimation. re_estimated: Logical indicates whether random effects estimated model fitting. Log-likelihood values directly compared models without estimation random effects. log_like_cv: yet implemented/NA: Numeric indicate corresponding uncertainty log-likelihood value. weight: Numeric indicates data weighting applied data value; manually fixed 1. *NOTE: need made responsive user-specified user-estimated data weighting data weighting added FIMS feature. get_number_of_parameters() returns vector integers specifying number fixed-effect parameters number random-effect parameters model. get_timing() returns amount time took run model seconds difftime object. get_version() returns package_version FIMS used fit model.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a slot in a FIMSFrame object — get_FIMSFrame","title":"Get a slot in a FIMSFrame object — get_FIMSFrame","text":"accessor function slot S4 class FIMSFrame, function named get_*() star can replaced slot name, e.g., get_data(). accessor functions preferred way access objects stored available slots.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a slot in a FIMSFrame object — get_FIMSFrame","text":"","code":"get_data(x)  # S4 method for class 'FIMSFrame' get_data(x)  # S4 method for class 'data.frame' get_data(x)  get_fleets(x)  # S4 method for class 'FIMSFrame' get_fleets(x)  # S4 method for class 'data.frame' get_fleets(x)  get_n_fleets(x)  # S4 method for class 'FIMSFrame' get_n_fleets(x)  # S4 method for class 'data.frame' get_n_fleets(x)  get_n_years(x)  # S4 method for class 'FIMSFrame' get_n_years(x)  # S4 method for class 'data.frame' get_n_years(x)  get_start_year(x)  # S4 method for class 'FIMSFrame' get_start_year(x)  # S4 method for class 'data.frame' get_start_year(x)  get_end_year(x)  # S4 method for class 'FIMSFrame' get_end_year(x)  # S4 method for class 'data.frame' get_end_year(x)  get_ages(x)  # S4 method for class 'FIMSFrame' get_ages(x)  # S4 method for class 'data.frame' get_ages(x)  get_n_ages(x)  # S4 method for class 'FIMSFrame' get_n_ages(x)  # S4 method for class 'data.frame' get_n_ages(x)  get_lengths(x)  # S4 method for class 'FIMSFrame' get_lengths(x)  # S4 method for class 'data.frame' get_lengths(x)  get_n_lengths(x)  # S4 method for class 'FIMSFrame' get_n_lengths(x)  # S4 method for class 'data.frame' get_n_lengths(x)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a slot in a FIMSFrame object — get_FIMSFrame","text":"x object returned FIMSFrame().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/get_FIMSFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a slot in a FIMSFrame object — get_FIMSFrame","text":"get_data() returns data frame class tbl_df containing data FIMS model long format. tibble potentially following columns depending fits ages lengths just one : type, name, age, length, datestart, dateend, value, unit, uncertainty. get_fleets() returns vector strings containing fleet names. get_n_fleets() returns integer specifying number fleets model, fleets inclusive fishing fleets survey vessels. get_n_years() returns integer specifying number years model. get_start_year() returns integer specifying start year model. get_end_year() returns integer specifying end year model. get_ages() returns vector age bins used model. get_n_ages() returns integer specifying number age bins used model. get_lengths() returns vector length bins used model. get_n_lengths() returns integer specifying number length bins used model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_data_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a new distribution for a data type or a process — initialize_data_distribution","title":"Set up a new distribution for a data type or a process — initialize_data_distribution","text":"Use methods::new() set distribution within existing module necessary linkages two. example, fleet module need distributional assumption parts data associated , requires use initialize_data_distribution(), recruitment module, like Beverton–Holt stock–recruit relationship, need distribution associated recruitment deviations, requires initialize_process_distribution().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_data_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a new distribution for a data type or a process — initialize_data_distribution","text":"","code":"initialize_data_distribution(   module,   family = NULL,   sd = list(value = 1, estimation_type = \"constant\"),   data_type = c(\"landings\", \"index\", \"agecomp\", \"lengthcomp\") )  initialize_process_distribution(   module,   par,   family = NULL,   sd = list(value = 1, estimation_type = \"constant\"),   is_random_effect = FALSE )  initialize_process_structure(module, par)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_data_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up a new distribution for a data type or a process — initialize_data_distribution","text":"module identifier C++ fleet module linked data interest. family description error distribution link function used model. argument takes family class, e.g., stats::gaussian(link = \"identity\"). sd list length two. first entry named \"value\" stores initial values (scalar vector) relevant standard deviations. default value = 1. second entry named \"estimation_type\" stores vector booleans (default = \"constant\") string indicating whether standard deviation estimated fixed effect held constant. \"value\" vector \"estimation_type\" scalar, single value specified \"estimation_type\" value repeated match length value. Otherwise, dimensions two must match. data_type string specifying type data distribution fit . Allowable types include c, landings, index, agecomp, lengthcomp default c. par string specifying parameter name distribution applies . Parameters must members specified module. Use methods::show(module) obtain names parameters within module. is_random_effect boolean indicating whether process estimated random effect.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_data_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a new distribution for a data type or a process — initialize_data_distribution","text":"reference class. returned. Use methods::show() view various Rcpp class fields, methods, documentation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_data_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a new distribution for a data type or a process — initialize_data_distribution","text":"","code":"if (FALSE) { # \\dontrun{ # Set up a new data distribution n_years <- 30 # Create a new fleet module fleet <- methods::new(Fleet) # Create a distribution for the fleet module fleet_distribution <- initialize_data_distribution(   module = fishing_fleet,   family = lognormal(link = \"log\"),   sd = list(     value = rep(sqrt(log(0.01^2 + 1)), n_years),     estimation_type = rep(\"constant\", n_years) # Could also be a single \"constant\"   ),   data_type = \"index\" )  # Set up a new process distribution # Create a new recruitment module recruitment <- methods::new(BevertonHoltRecruitment) # view parameter names of the recruitment module methods::show(BevertonHoltRecruitment) # Create a distribution for the recruitment module recruitment_distribution <- initialize_process_distribution(   module = recruitment,   par = \"log_devs\",   family = gaussian(),   sd = list(value = 0.4, estimation_type = \"constant\"),   is_random_effect = FALSE ) } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_fims.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FIMS modules — initialize_fims","title":"Initialize FIMS modules — initialize_fims","text":"Initializes multiple modules within Fisheries Integrated Modeling System (FIMS), including fleet, recruitment, growth, maturity, population modules. function iterates provided fleets, setting necessary sub-modules selectivity, index, age composition. also sets distribution models fishery index age-composition data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_fims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FIMS modules — initialize_fims","text":"","code":"initialize_fims(parameters, data)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_fims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FIMS modules — initialize_fims","text":"parameters list. Contains parameters modules required initialization. data S4 object. FIMS input data.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/initialize_fims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize FIMS modules — initialize_fims","text":"list containing parameters initialized FIMS modules, ready use TMB modeling.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is.FIMSFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is of class FIMSFit — is.FIMSFit","title":"Check if an object is of class FIMSFit — is.FIMSFit","text":"Check object class FIMSFit","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is.FIMSFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is of class FIMSFit — is.FIMSFit","text":"","code":"is.FIMSFit(x)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is.FIMSFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is of class FIMSFit — is.FIMSFit","text":"x Returned list fit_fims().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is_fims_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"Should FIMS be verbose? — is_fims_verbose","title":"Should FIMS be verbose? — is_fims_verbose","text":"Verbosity set globally FIMS using options(rlib_message_verbosity = \"quiet\") stop printing messages cli::cli_inform(). Using global option allows verbose argument every function. cli::cli_abort() messages printed console matter global option set .","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is_fims_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Should FIMS be verbose? — is_fims_verbose","text":"","code":"is_fims_verbose()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is_fims_verbose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Should FIMS be verbose? — is_fims_verbose","text":"logical returned TRUE ensures messages cli::cli_inform() printed console.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/is_fims_verbose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Should FIMS be verbose? — is_fims_verbose","text":"","code":"# function is not exported if (FALSE) { # \\dontrun{ FIMS:::is_fims_verbose() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Distributions not available in the stats package — lognormal","title":"Distributions not available in the stats package — lognormal","text":"Family objects provide convenient way specify details models used functions stats::glm(). functions within package available within stats package designed similar manner.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distributions not available in the stats package — lognormal","text":"","code":"lognormal(link = \"log\")  multinomial(link = \"logit\")"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distributions not available in the stats package — lognormal","text":"link string specifying model link function. example, \"identity\" \"log\" appropriate names stats::gaussian() distribution. \"log\" \"logit\" defaults lognormal multinomial, respectively.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distributions not available in the stats package — lognormal","text":"object class family (concise print method). particular family truncated length compared distributions stats::family(). family character: family name. link character: link name.","code":""},{"path":[]},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distributions not available in the stats package — lognormal","text":"","code":"a_family <- multinomial() a_family[[\"family\"]] #> [1] \"multinomial\" a_family[[\"link\"]] #> [1] \"logit\""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/m_.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","text":"accessor function data type needed run FIMS model. FIMS model accepts vectors data thus m_*() functions, star can replaced data type separated underscores, e.g., weight_at_age. accessor functions preferred way pass data FIMS module data appropriate indexing.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/m_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","text":"","code":"m_landings(x, fleet_name)  # S4 method for class 'FIMSFrame' m_landings(x, fleet_name)  # S4 method for class 'data.frame' m_landings(x, fleet_name)  m_index(x, fleet_name)  # S4 method for class 'FIMSFrame' m_index(x, fleet_name)  # S4 method for class 'data.frame' m_index(x, fleet_name)  m_agecomp(x, fleet_name)  # S4 method for class 'FIMSFrame' m_agecomp(x, fleet_name)  # S4 method for class 'data.frame' m_agecomp(x, fleet_name)  m_lengthcomp(x, fleet_name)  # S4 method for class 'FIMSFrame' m_lengthcomp(x, fleet_name)  # S4 method for class 'data.frame' m_lengthcomp(x, fleet_name)  m_weight_at_age(x)  # S4 method for class 'FIMSFrame' m_weight_at_age(x)  # S4 method for class 'data.frame' m_weight_at_age(x)  m_age_to_length_conversion(x, fleet_name)  # S4 method for class 'FIMSFrame' m_age_to_length_conversion(x, fleet_name)  # S4 method for class 'data.frame' m_age_to_length_conversion(x, fleet_name)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/m_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","text":"x object returned FIMSFrame(). fleet_name string, vector strings, specifying name fleet(s) interest want landings data . strings must exactly match strings column \"name\" get_data(x).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/m_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","text":"m_*() functions return vectors data. Currently, order data order data frame arranging done FIMSFrame() function just extracts appropriate column.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/m_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a vector of data to be passed to a FIMS module from a FIMSFrame object — m_","text":"Age--length-conversion data, .e., proportion age \"\" length \"l\", used convert lengths (input data) ages (modeled) way fit length data without estimating growth.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/remove_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove test data — remove_test_data","title":"Remove test data — remove_test_data","text":"Intended developers remove test data run tests fresh. Developers run function testing changes affect FIMS input output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/remove_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove test data — remove_test_data","text":"","code":"remove_test_data()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/remove_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove test data — remove_test_data","text":"","code":"if (FALSE) { # \\dontrun{ remove_test_data() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_derived_quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON derived quantities — reshape_json_derived_quantities","title":"Reshape JSON derived quantities — reshape_json_derived_quantities","text":"function processes finalized FIMS JSON output reshapes derived quantities structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_derived_quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON derived quantities — reshape_json_derived_quantities","text":"","code":"reshape_json_derived_quantities(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_derived_quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON derived quantities — reshape_json_derived_quantities","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_derived_quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON derived quantities — reshape_json_derived_quantities","text":"tibble containing reshaped parameter estimates.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON estimates — reshape_json_estimates","title":"Reshape JSON estimates — reshape_json_estimates","text":"function processes finalized FIMS JSON output reshapes parameter estimates structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON estimates — reshape_json_estimates","text":"","code":"reshape_json_estimates(finalized_fims, opt = list())"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON estimates — reshape_json_estimates","text":"finalized_fims JSON object containing finalized FIMS output. opt object returned optimizer, typically stats::nlminb(), used fit TMB model.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON estimates — reshape_json_estimates","text":"tibble containing reshaped parameter estimates.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON 'fits' components — reshape_json_fits","title":"Reshape JSON 'fits' components — reshape_json_fits","text":"function processes finalized FIMS JSON output extracts/formats log_like, distribution, init, expected density_components, observed_values, expected_values structured tibble easier analysis manipulation. Values subsequently used generate 'fits' tibble get_fits().","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON 'fits' components — reshape_json_fits","text":"","code":"reshape_json_fits(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON 'fits' components — reshape_json_fits","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON 'fits' components — reshape_json_fits","text":"tibble containing reshaped data fitting values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape JSON 'values' components — reshape_json_values","title":"Reshape JSON 'values' components — reshape_json_values","text":"function processes model input FIMS JSON output ('values') reshapes initial values data inputs structured tibble.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape JSON 'values' components — reshape_json_values","text":"","code":"reshape_json_values(finalized_fims)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape JSON 'values' components — reshape_json_values","text":"finalized_fims JSON object containing finalized FIMS output.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_json_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape JSON 'values' components — reshape_json_values","text":"tibble containing reshaped initial data values.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_tmb_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape TMB estimates — reshape_tmb_estimates","title":"Reshape TMB estimates — reshape_tmb_estimates","text":"function processes TMB std reshapes structured tibble easier analysis manipulation.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_tmb_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape TMB estimates — reshape_tmb_estimates","text":"","code":"reshape_tmb_estimates(obj, sdreport = NULL, opt = NULL, parameter_names)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_tmb_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape TMB estimates — reshape_tmb_estimates","text":"obj object returned TMB::MakeADFun(). sdreport object sdreport class returned TMB::sdreport(). opt object returned optimizer, typically stats::nlminb(), used fit TMB model. parameter_names character vector parameter names. used identify parameters std object.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/reshape_tmb_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape TMB estimates — reshape_tmb_estimates","text":"tibble containing reshaped estimates (.e., parameters derived quantities).","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the google test suite — run_gtest","title":"Run the google test suite — run_gtest","text":"Intended developers run google test suite R.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the google test suite — run_gtest","text":"","code":"run_gtest(...)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_gtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the google test suite — run_gtest","text":"... Additional arguments ctest --test-dir build \"--rerun-failed --output--failure\".","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_integration_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R integration tests — run_r_integration_tests","title":"Run R integration tests — run_r_integration_tests","text":"Intended developers run R integration tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_integration_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R integration tests — run_r_integration_tests","text":"","code":"run_r_integration_tests()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_integration_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R integration tests — run_r_integration_tests","text":"","code":"if (FALSE) { # \\dontrun{ run_r_integration_tests() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_unit_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R unit tests — run_r_unit_tests","title":"Run R unit tests — run_r_unit_tests","text":"Intended developers run R unit tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_unit_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R unit tests — run_r_unit_tests","text":"","code":"run_r_unit_tests()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/run_r_unit_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R unit tests — run_r_unit_tests","text":"","code":"if (FALSE) { # \\dontrun{ run_r_unit_tests() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_and_run_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup and run the google test suite — setup_and_run_gtest","title":"Setup and run the google test suite — setup_and_run_gtest","text":"Intended developers set local environment run google test suite R.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_and_run_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup and run the google test suite — setup_and_run_gtest","text":"","code":"setup_and_run_gtest(...)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_and_run_gtest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup and run the google test suite — setup_and_run_gtest","text":"... Additional arguments ctest --test-dir build \"--rerun-failed --output--failure\".","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_and_run_gtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup and run the google test suite — setup_and_run_gtest","text":"","code":"if (FALSE) { # \\dontrun{ setup_and_run_gtest(\"--rerun-failed --output-on-failure\") } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_gtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up your local environment to run the google tests locally — setup_gtest","title":"Set up your local environment to run the google tests locally — setup_gtest","text":"Intended developers set local environment prior running integration tests.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_gtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up your local environment to run the google tests locally — setup_gtest","text":"","code":"setup_gtest()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/setup_gtest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up your local environment to run the google tests locally — setup_gtest","text":"","code":"if (FALSE) { # \\dontrun{ setup_gtest() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/style_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Style the C++ files — style_cpp","title":"Style the C++ files — style_cpp","text":"Style C++ files using clang. function currently development.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/style_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style the C++ files — style_cpp","text":"","code":"style_cpp()"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/style_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style the C++ files — style_cpp","text":"","code":"if (FALSE) { # \\dontrun{ style_cpp() } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_gtest_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","text":"helper function generates GoogleTest (gtest) C++ template file given function appends lines CMakeLists.txt register test.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_gtest_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","text":"","code":"use_gtest_template(name = \"FileName_ClassName_FunctionName\")"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_gtest_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","text":"name string representing combined name C++ test file CMake executable target. must follow format FileName_ClassName_FunctionName, FileName C++ source file name (e.g., \"Logistic\") ClassName C++ class name (e.g., \"LogisticSelectivity\") FunctionName C++ function name (e.g., \"Evaluate\") use underscores separate component. example: Logistic_LogisticSelectivity_Evaluate. function member class, use placeholder ClassName. example: FIMSMath_ClassName_Logistic. default FileName_ClassName_FunctionName.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_gtest_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","text":"successful, function invisibly returns TRUE allow chaining commands. function unsuccessful, error message returned. Three messages also returned usethis package, used function. first states FIMS project computer. second states file path newly created file. file automatically opened. third states test registered tests/gtest/CMakeLists.txt.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_gtest_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tests/gtest/test_*.cpp test file and register it in CMakeLists.txt — use_gtest_template","text":"","code":"if (FALSE) { # \\dontrun{ # Create a new test file named # \"test_Logistic_LogisticSelectivity_Evaluate.cpp\" for # `LogisticSelectivity::evaluate()` in # `inst/include/population_dynamics/selectivity/functors/logistic.hpp`.  FIMS:::use_gtest_template(name = \"Logistic_LogisticSelectivity_Evaluate\") } # }"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tests/testthat/test-*.R test file — use_testthat_template","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"helper function creates new test file testthat using template available within templates folder package. test file created \"tests/testthat\" directory name based input argument name. test file already exists, error message returned changes made.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"","code":"use_testthat_template(name)"},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"name character string providing name R function want test. name used create file name, .e., tests/testthat/test-{name}.R. name specified, function able create file name error returned.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"successful, function invisibly returns TRUE allow chaining commands. function unsuccessful, error message returned. Two messages also returned usethis package, used function. first states FIMS project computer. second states file path newly created file. file automatically opened.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"three minimum testing criteria FIMS, validated every R function within package. template file sets section three following test criteria: Input output correctness (IO correctness): ensure function behaves expected correct inputs returns expected outputs. Edge-case handling (Edge handling): validate function's performance invalid inputs unusual scenarios. Built-errors warnings (Error handling): confirm appropriate error warning messages triggered exceptional conditions. every expectation within test file call #' @description fits one line describing test. information used bookdown report testing results.","code":""},{"path":"https://NOAA-FIMS.github.io/FIMSRTMB/reference/use_testthat_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tests/testthat/test-*.R test file — use_testthat_template","text":"","code":"# Create a new test file named \"test-new_function\" for `new_function()` if (FALSE) { # \\dontrun{ FIMS:::use_testthat_template(\"new_function\") } # }"}]
